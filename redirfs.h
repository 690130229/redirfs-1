#if !defined(_REDIRFS_H)
#define _REDIRFS_H

enum rfs_err {
	RFS_ERR_OK = 0,
	RFS_ERR_INVAL = -EINVAL,
	RFS_ERR_NOMEM = -ENOMEM,
	RFS_ERR_NOENT = -ENOENT,
	RFS_ERR_NAMETOOLONG = -ENAMETOOLONG
};

enum rfs_op_id {
	RFS_NONE_DOP_D_REVALIDATE,
	RFS_NONE_DOP_D_HASH,
	RFS_NONE_DOP_D_COMPARE,
	RFS_NONE_DOP_D_DELETE,
	RFS_NONE_DOP_D_RELEASE,
	RFS_NONE_DOP_D_IPUT,

	RFS_REG_DOP_D_REVALIDATE,
	RFS_REG_DOP_D_HASH,
	RFS_REG_DOP_D_COMPARE,
	RFS_REG_DOP_D_DELETE,
	RFS_REG_DOP_D_RELEASE,
	RFS_REG_DOP_D_IPUT,

	RFS_REG_IOP_CREATE,
	RFS_REG_IOP_LOOKUP,
	RFS_REG_IOP_LINK,
	RFS_REG_IOP_UNLINK,
	RFS_REG_IOP_SYMLINK,
	RFS_REG_IOP_MKDIR,
	RFS_REG_IOP_RMDIR,
	RFS_REG_IOP_MKNOD,
	RFS_REG_IOP_RENAME,
	RFS_REG_IOP_READLINK,
	RFS_REG_IOP_FOLLOW_LINK,
	RFS_REG_IOP_PUT_LINK,
	RFS_REG_IOP_TRUNCATE,
	RFS_REG_IOP_PERMISSION,
	RFS_REG_IOP_SETATTR,
	RFS_REG_IOP_GETATTR,
	RFS_REG_IOP_SETXATTR,
	RFS_REG_IOP_GETXATTR,
	RFS_REG_IOP_LISTXATTR,
	RFS_REG_IOP_REMOVEXATTR,
	RFS_REG_IOP_TRUNCATE_RANGE,

	RFS_REG_FOP_LLSEEK,
	RFS_REG_FOP_READ,
	RFS_REG_FOP_WRITE,
	RFS_REG_FOP_AIO_READ,
	RFS_REG_FOP_AIO_WRITE,
	RFS_REG_FOP_READDIR,
	RFS_REG_FOP_POLL,
	RFS_REG_FOP_IOCTL,
	RFS_REG_FOP_UNBLOCKED_IOCTL,
	RFS_REG_FOP_COMPAT_IOCTL,
	RFS_REG_FOP_MMAP,
	RFS_REG_FOP_OPEN,
	RFS_REG_FOP_FLUSH,
	RFS_REG_FOP_RELEASE,
	RFS_REG_FOP_FSYNC,
	RFS_REG_FOP_AIO_FSYNC,
	RFS_REG_FOP_FASYNC,
	RFS_REG_FOP_LOCK,
	RFS_REG_FOP_SENDFILE,
	RFS_REG_FOP_SENDPAGE,
	RFS_REG_FOP_GET_UNMAPPED_AREA,
	RFS_REG_FOP_CHECK_FLAGS,
	RFS_REG_FOP_DIR_NOTIFY,
	RFS_REG_FOP_FLOCK,
	RFS_REG_FOP_SPLICE_WRITE,
	RFS_REG_FOP_SPLICE_READ,

	RFS_REG_AOP_WRITEAPGE,
	RFS_REG_AOP_READPAGE,
	RFS_REG_AOP_SYNC_PAGE,
	RFS_REG_AOP_WRITEPAGES,
	RFS_REG_AOP_SET_PAGE_DIRTY,
	RFS_REG_AOP_READPAGES,
	RFS_REG_AOP_PREPARE_WRITE,
	RFS_REG_AOP_COMMIT_WRITE,
	RFS_REG_AOP_BMAP,
	RFS_REG_AOP_INVALIDATEPAGE,
	RFS_REG_AOP_RELEASEPAGE,
	RFS_REG_AOP_DIRECT_IO,
	RFS_REG_AOP_GET_XIP_PAGE,
	RFS_REG_AOP_MIGRATEPAGE,

	RFS_DIR_DOP_D_REVALIDATE,
	RFS_DIR_DOP_D_HASH,
	RFS_DIR_DOP_D_COMPARE,
	RFS_DIR_DOP_D_DELETE,
	RFS_DIR_DOP_D_RELEASE,
	RFS_DIR_DOP_D_IPUT,

	RFS_DIR_IOP_CREATE,
	RFS_DIR_IOP_LOOKUP,
	RFS_DIR_IOP_LINK,
	RFS_DIR_IOP_UNLINK,
	RFS_DIR_IOP_SYMLINK,
	RFS_DIR_IOP_MKDIR,
	RFS_DIR_IOP_RMDIR,
	RFS_DIR_IOP_MKNOD,
	RFS_DIR_IOP_RENAME,
	RFS_DIR_IOP_READLINK,
	RFS_DIR_IOP_FOLLOW_LINK,
	RFS_DIR_IOP_PUT_LINK,
	RFS_DIR_IOP_TRUNCATE,
	RFS_DIR_IOP_PERMISSION,
	RFS_DIR_IOP_SETATTR,
	RFS_DIR_IOP_GETATTR,
	RFS_DIR_IOP_SETXATTR,
	RFS_DIR_IOP_GETXATTR,
	RFS_DIR_IOP_LISTXATTR,
	RFS_DIR_IOP_REMOVEXATTR,
	RFS_DIR_IOP_TRUNCATE_RANGE,

	RFS_DIR_FOP_LLSEEK,
	RFS_DIR_FOP_READ,
	RFS_DIR_FOP_WRITE,
	RFS_DIR_FOP_AIO_READ,
	RFS_DIR_FOP_AIO_WRITE,
	RFS_DIR_FOP_READDIR,
	RFS_DIR_FOP_POLL,
	RFS_DIR_FOP_IOCTL,
	RFS_DIR_FOP_UNBLOCKED_IOCTL,
	RFS_DIR_FOP_COMPAT_IOCTL,
	RFS_DIR_FOP_MMAP,
	RFS_DIR_FOP_OPEN,
	RFS_DIR_FOP_FLUSH,
	RFS_DIR_FOP_RELEASE,
	RFS_DIR_FOP_FSYNC,
	RFS_DIR_FOP_AIO_FSYNC,
	RFS_DIR_FOP_FASYNC,
	RFS_DIR_FOP_LOCK,
	RFS_DIR_FOP_SENDFILE,
	RFS_DIR_FOP_SENDPAGE,
	RFS_DIR_FOP_GET_UNMAPPED_AREA,
	RFS_DIR_FOP_CHECK_FLAGS,
	RFS_DIR_FOP_DIR_NOTIFY,
	RFS_DIR_FOP_FLOCK,
	RFS_DIR_FOP_SPLICE_WRITE,
	RFS_DIR_FOP_SPLICE_READ,

	RFS_DIR_AOP_WRITEAPGE,
	RFS_DIR_AOP_READPAGE,
	RFS_DIR_AOP_SYNC_PAGE,
	RFS_DIR_AOP_WRITEPAGES,
	RFS_DIR_AOP_SET_PAGE_DIRTY,
	RFS_DIR_AOP_READPAGES,
	RFS_DIR_AOP_PREPARE_WRITE,
	RFS_DIR_AOP_COMMIT_WRITE,
	RFS_DIR_AOP_BMAP,
	RFS_DIR_AOP_INVALIDATEPAGE,
	RFS_DIR_AOP_RELEASEPAGE,
	RFS_DIR_AOP_DIRECT_IO,
	RFS_DIR_AOP_GET_XIP_PAGE,
	RFS_DIR_AOP_MIGRATEPAGE,

	RFS_OP_NR,
	RFS_OP_END
};

enum rfs_op_retv {
	RFS_OP_RETV_STOP,
	RFS_OP_RETV_CONTINUE
};

typedef void* rfs_filter;
typedef void* rfs_context;

#define RFS_PATH_SINGLE		1	
#define RFS_PATH_SUBTREE	2
#define RFS_PATH_FIXED		4
#define RFS_PATH_FLOAT		8
#define RFS_PATH_INCLUDE	16
#define RFS_PATH_EXCLUDE	32

struct rfs_path_info {
	const char *path;
	int flags;
};

struct rfs_op_args {
};

struct rfs_filter_info {
	const char *name;
	int priority;
};

struct rfs_op_info {
	enum rfs_op_id op_id;
	enum rfs_op_retv (*pre_cb)(rfs_context, struct rfs_op_args);
	enum rfs_op_retv (*post_cb)(rfs_context, struct rfs_op_args);
};

enum rfs_err rfs_register_filter(rfs_filter *filter, struct rfs_filter_info *filter_info);
enum rfs_err rfs_unregister_filter(rfs_filter filter);
enum rfs_err rfs_set_operations(rfs_filter filter, struct rfs_op_info *op_info);
enum rfs_err rfs_set_path(rfs_filter filter, struct rfs_path_info *path_info);

enum rfs_err rfs_include_path(rfs_filter filter, struct rfs_path_info *path_info);
enum rfs_err rfs_exclude_path(rfs_filter filter, struct rfs_path_info *path_info);

#endif
